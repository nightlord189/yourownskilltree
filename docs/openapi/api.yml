openapi: 3.0.3
info:
  title: YourOwnSkillTree API
  description: This is an API description for service that helps you build your own skill tree.
  contact:
    email: aburavov189@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: node
    description: Node of the skill tree

paths:
  /node/create:
    post:
      tags:
        - node
      summary: Create a new node
      operationId: createNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeCreateRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeCreateResponse'
        '400':
          description: Bad request

  /node/search:
    post:
      tags:
        - node
      summary: Get an array of nodes by search filter
      operationId: searchNodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeSearchRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeSearchResponse'
        '400':
          description: Bad request

  /node/read:
    post:
      tags:
        - node
      summary: Get a single node
      operationId: getNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeReadRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeReadResponse'
        '400':
          description: Bad request
        '404':
          description: Not found

  /node/update:
    post:
      tags:
        - node
      summary: Update a node
      operationId: updateNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeUpdateRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeUpdateResponse'
        '400':
          description: Bad request
        '404':
          description: Not found

  /node/delete:
    post:
      tags:
        - node
      summary: Delete a node
      operationId: deleteNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeDeleteRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDeleteResponse'
        '400':
          description: Bad request
        '404':
          description: Not found

components:
  schemas:

    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дискриминатор для вычисления типа запроса
          example: create
        debug:
          $ref: '#/components/schemas/Debug'
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/NodeCreateRequest'
          read:   '#/components/schemas/NodeReadRequest'
          update: '#/components/schemas/NodeUpdateRequest'
          delete: '#/components/schemas/NodeDeleteRequest'
          search: '#/components/schemas/NodeSearchRequest'

    ResponseResult:
      type: string
      enum:
        - success
        - error

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дискриминатор для вычисления типа запроса
          example: create
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/NodeCreateResponse'
          read:   '#/components/schemas/NodeReadResponse'
          update: '#/components/schemas/NodeUpdateResponse'
          delete: '#/components/schemas/NodeDeleteResponse'
          search: '#/components/schemas/NodeSearchResponse'

    NodeCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            node:
              $ref: '#/components/schemas/Node'

    NodeUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            node:
              $ref: '#/components/schemas/Node'

    NodeReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            id:
              type: string
              example: a8faeb94-eb05-44f8-888d-e8defb48e412
              description: ID of the node

    NodeDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            id:
              type: string
              example: a8faeb94-eb05-44f8-888d-e8defb48e412
              description: ID of the node

    NodeSearchRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - type: object
          properties:
            filter:
              type: object
              properties:
                parent_id:
                  type: string
                  description: Returns children of a node
                  example: a8faeb94-eb05-44f8-888d-e8defb48e412
                name_like:
                  type: string
                  description: Search by substring
                  example: "Learn"

    NodeResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом узла
          properties:
            node:
              $ref: '#/components/schemas/Node'

    NodeResponseMulti:
      allOf:
        - type: object
          description: Список найденных объектов
          properties:
            nodes:
              type: array
              items:
                $ref: '#/components/schemas/Node'

    NodeCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/NodeResponseSingle'

    NodeReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/NodeResponseSingle'

    NodeUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/NodeResponseSingle'

    NodeDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/NodeResponseSingle'

    NodeSearchResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/NodeResponseMulti'

    Question:
      type: object
      description: question of the node for testing
      properties:
        text:
          type: string
        type:
          type: string
          example: bool
          enum:
            - open
            - closed
        answers:
          type: array
          items:
            type: string
        right_answer:
          type: string

    Node:
      type: object
      properties:
        id:
          type: string
          nullable: true
          example: a8faeb94-eb05-44f8-888d-e8defb48e412
        name:
          type: string
        description:
          type: string
        completion_type:
          type: string
          example: bool
          enum:
            - bool
            - percentage
            - test
        parent_ids:
          type: array
          items:
            type: string
        status:
          type: string
          example: opened
          enum:
            - closed
            - open
            - in_progress
            - completed
        progress:
          type: integer
          format: int
          minimum: 1
          maximum: 100
          example: 10
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
      required:
        - id
        - name
        - completion_type
        - status

    Debug:
      type: object
      properties:
        mode:
          type: string
          enum:
            - prod
            - test
            - stub
        stub:
          type: string
          description: Перечисления всех стабов
          enum:
            - success
            - notFound
            - badId
            - cannotDelete
            - dbError