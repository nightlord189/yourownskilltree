openapi: 3.0.3
info:
  title: YourOwnSkillTree API
  description: This is an API description for service that helps you build your own skill tree.
  contact:
    email: aburavov189@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: node
    description: Node of the skill tree

paths:
  /node:
    post:
      tags:
        - node
      summary: Create a new node
      operationId: createNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
        '400':
          description: Bad request

    get:
      tags:
        - node
      summary: Get an array of nodes by filter
      operationId: getNodes
      parameters:
        - name: parent_id
          in: query
          description: Returns children of a node
          required: false
          schema:
            type: string
            example: a8faeb94-eb05-44f8-888d-e8defb48e412
        - name: name_like
          in: query
          description: Search by substring
          required: false
          schema:
            type: string
            example: "Learn"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeArrayResponse'
        '400':
          description: Bad request
        '404':
          description: Not found

  /node/{nodeId}:
    get:
      tags:
        - node
      summary: Get a single node
      operationId: getNode
      parameters:
        - name: nodeId
          in: path
          description: ID of the node
          required: true
          schema:
            type: string
            example: a8faeb94-eb05-44f8-888d-e8defb48e412
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
        '400':
          description: Bad request
        '404':
          description: Not found

    put:
      tags:
        - node
      summary: Update a node
      operationId: updateNode
      parameters:
        - name: nodeId
          in: path
          description: ID of the node
          required: true
          schema:
            type: string
            example: a8faeb94-eb05-44f8-888d-e8defb48e412
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
        '400':
          description: Bad request
        '404':
          description: Not found

    delete:
      tags:
        - node
      summary: Delete a node
      operationId: deleteNode
      parameters:
        - name: nodeId
          in: path
          description: ID of the node
          required: true
          schema:
            type: string
            example: a8faeb94-eb05-44f8-888d-e8defb48e412
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
        '400':
          description: Bad request

components:
  schemas:
    Question:
      type: object
      description: question of the node for testing
      properties:
        text:
          type: string
        type:
          type: string
          example: bool
          enum:
            - open
            - closed
        answers:
          type: array
          items:
            type: string
        right_answer:
          type: string

    NodeArrayResponse:
      type: array
      items:
        $ref: "#/components/schemas/NodeResponse"

    NodeResponse:
      allOf:
        - $ref: "#/components/schemas/Node"
        - type: object
          properties:
            id:
              type: string
              example: a8faeb94-eb05-44f8-888d-e8defb48e412
          required:
            - id

    Node:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        completion_type:
          type: string
          example: bool
          enum:
            - bool
            - percentage
            - test
        parent_ids:
          type: array
          items:
            type: string
        status:
          type: string
          example: opened
          enum:
            - closed
            - open
            - in_progress
            - completed
        progress:
          type: integer
          format: int
          minimum: 1
          maximum: 100
          example: 10
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
      required:
        - id
        - name
        - completion_type
        - status